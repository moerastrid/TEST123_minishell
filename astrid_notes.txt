readline - char *readline (const char *prompt); The line returned is allocated with malloc(3);
 the caller must free it when finished.

rl_clear_history - void rl_clear_history(void); it frees private data Readline saves in the history list.

rl_on_new_line - int rl_on_new_line(void); 
Tell the update functions that we have moved onto a new (empty) line, usually after outputting a newline.

rl_replace_line - void rl_replace_line (const char *text, int clear_undo);
Replace the contents of rl_line_buffer with text. 
The point and mark are preserved, if possible. 
If clear_undo is non-zero, the undo list associated with the current line is cleared.

rl_redisplay - void rl_redisplay (void);
Change what's displayed on the screen to reflect the current contents of rl_line_buffer.

add_history - void add_history (char *string);


printf
malloc
free
write
access
open
read
close
fork
wait
waitpid
wait3
wait4

/*
void	my_signals(void)
{
	int			my_signal;
	sigset_t	my_first_set;

	my_signal = 0;
	sigemptyset(&my_first_set);
	sigaddset(&my_first_set, my_signal);
}
*/ 

signal -
Signals allow the manipulation of a process from outside its domain, 
as well as allowing the process to manipulate itself or copies of itself (children).

sigaction - 

sigemptyset - int sigemptyset(sigset_t *set);
The sigemptyset() function initializes a signal set to be empty.

sigaddset - int sigaddset(sigset_t *set, int signo);
The sigaddset() function adds the specified signal signo to the signal set.

kill - int kill(pid_t pid, int sig);
The kill() function sends the signal specified by sig to pid, a process or a group of processes.

exit


getcwd - char * getcwd(char *buf, size_t size);
Copies the absolute pathname of the current working directory 
into the memory referenced by buf and returns a pointer to buf.
The size argument is the size, in bytes, of the array referenced by buf.

chdir - int chdir(const char *path);
The path argument points to the pathname of a directory. 
he chdir() function causes the named directory to become the current working directory, 
that is, the starting point for path searches of pathnames not beginning with a slash, `/'.

stat - int stat(const char *restrict path, struct stat *restrict buf);
The stat() function obtains information about the file pointed to by path.
Read, write or execute permission of the named file is not required, 
but all directories listed in the path name leading to the file must be searchable.

lstat - int lstat(const char *restrict path, struct stat *restrict buf);
The lstat() function is like stat() except in the case where the named file is a symbolic link;
lstat() returns information about the link,
while stat() returns information about the file the link references.

fstat - int fstat(int fildes, struct stat *buf);
The fstat() obtains the same information about an open file known by the file descriptor fildes.

unlink - int unlink(const char *path);
The unlink() function removes the link named by path from its directory
and decrements the link count of the file which was referenced by the link.


execve
dup
dup2
pipe


opendir - DIR *opendir(const char *filename);
The opendir() function opens the directory named by filename

readdir - struct dirent *readdir(DIR *dirp);
The readdir() function returns a pointer to the next directory entry.

closedir - int closedir(DIR *dirp);

strerror
perror




isatty - int isatty(int fd);
Determines if the file descriptor fd refers to a valid terminal type device.

ttyname - char *ttyname(int fd);
Gets the related device name of a file descriptor for which isatty() is true.

ttyslot - int ttyslot(void);
Returns the index of the current user's entry in some file

ioctl
getenv

tcsetattr - int tcsetattr(int fildes, int optional_actions, const struct termios *termios_p);

tcgetattr - int tcgetattr(int fildes, struct termios *termios_p);


//direct curses interface to the terminfo capability database

tgetent - int tgetent(char *bp, const char *name);
The tgetent routine loads the entry for name. It returns 1 on success, 0 if
there is no such entry, and -1 if the terminfo database could not be found.
The emulation ignores the buffer pointer bp.

tgetflag - int tgetflag(char *id);
Gets the boolean entry for id, or zero if it is not available.

tgetnum - int tgetnum(char *id);
Gets the numeric entry for id, or -1 if it is not available.

tgetstr - char *tgetstr(char *id, char **area);
The tgetstr routine returns the string entry for id, or zero if it is not
available. Use tputs to output the returned string. The return value will
also be copied to the buffer pointed to by area, and the area value will be
updated to point past the null ending this value.

tgoto - *tgoto(const char *cap, int col, int row);
The tgoto routine instantiates the parameters into the given capability.
The output from this routine is to be passed to tputs.

tputs - int tputs(const char *str, int affcnt, int (*putc)(int));
The tputs routine is described on the curs_terminfo(3X) manual page.
It can retrieve capabilities by either termcap or terminfo name.
