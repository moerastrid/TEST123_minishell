Bash Manual Samenvatting

(Useful) Definitions:

	Metacharacter:
		A metacharacter is a space, tab, newline, or one of the following characters:
		‘|’, ‘&’, ‘;’, ‘(’, ‘)’, ‘<’, or ‘>’.
	Control operator:
		A token that performs a control function. It is a newline or one of the following: ‘||’, ‘&&’, ‘&’, ‘;’, ‘;;’, ‘;&’, ‘;;&’, ‘|’, ‘|&’, ‘(’, or ‘)’.

Shell syntax:
	When the shell reads input, it proceeds to divide the input into words and operators, employing the quoting rules.
	The shell ignores the comment symbol (‘#’), and the rest of that line.
	The shell then parses these tokens into commands and other constructs, removes the meaning of special words or characters, expands others, redirects input and output, executes the command, waits for the command’s exit status, and makes that exit status available for inspection.

The following is a brief description of the shell’s operation when it reads and executes a command. Basically, the shell does the following:
	1. Reads its input from the user’s terminal.
	2. Breaks the input into words and operators, obeying the quoting rules. These tokens are separated by metacharacters.
	3. Parses the tokens into simple commands.
	4. Performs the various shell expansions, breaking the expanded tokens into lists of filenames and commands and arguments.
	5. Performs any necessary redirections and removes the redirection operators and their operands from the argument list.
	6. Executes the command.
	7. Optionally waits for the command to complete and collects its exit status.

Quoting:
	Quoting is used to remove the meaning of special characters or words to the shell, and to prevent parameter expansion.
	Each of the shell metacharacters has special meaning to the shell and must be quoted if it is to represent itself
	There are two quoting mechanisms: single quotes, and double quotes.
	(We could add backslash, it should be really easy?)

Single quotes:
	Enclosing characters in single quotes preserves the literal value of each character within the quotes. A single quote may not occur between single quotes, even when preceded by a backslash.
Double quotes:
	Enclosing characters in double quotes preserves the literal value of all characters within the quotes, with the exception of ‘$’ which retains its special meaning.

Shell commands:
	A simple shell command such as ‘echo a b c‘ consists of the command itself followed by arguments, separated by spaces.
	More complex shell commands are composed of simple commands arranged together by pipelines, in which the output of one command becomes the input of a second.

Reserved words: 3.2.1
	?

Simple commands:
	A simple command is a sequence of words separated by spaces, terminated by a control operator ('|'). The first word generally specifies a command to be executed, with the rest of the words being that command’s arguments.
	The return status of a simple command is the exit status of the waitpid function, or 128+n if the command was terminated by signal n.

Pipelines:
	A pipeline is a sequence of one or more commands separated by ‘|’.
	The output of each command in the pipeline is connected via a pipe to the input of the next command. This connection is performed before any redirections specified by command1.
	The shell waits for all commands in the pipeline to complete.
	Each command in a pipeline is executed in its own subshell, which is a separate process. The exit status of a pipeline is the exit status of the last command.
	The shell waits for all commands in the pipeline to terminate before returning a value.

Shell parameters: 3.4
	?

Expansion:
Expansion is performed on the command line after it has been split into tokens. There are two kinds of expansion performed (in minishell):

	parameter expansion
	word splitting

The ‘$’ character introduces parameter expansion.
	Parameter expansion:
		The basic form of parameter expansion is $parameter. The value of parameter is substituted. The result of the expansion is subject to word splitting.

Word splitting:
	The shell scans the results of parameter expansion that did not occur within double quotes for word splitting.

	The shell treats each character of $IFS as a delimiter, and splits the results of the other expansions into words using these characters as field terminators. If IFS is unset, or its value is exactly <space><tab><newline>, the default, then sequences of <space>, <tab>, and <newline> at the beginning and end of the results of the previous expansions are ignored, and any sequence of IFS characters not at the beginning or end serves to delimit words.

	If IFS has a value other than the default, then sequences of the whitespace characters space, tab, and newline are ignored at the beginning and end of the word, as long as the whitespace character is in the value of IFS (an IFS whitespace character).
	Any character in IFS that is not IFS whitespace, along with any adjacent IFS whitespace characters, delimits a field.
	A sequence of IFS whitespace characters is also treated as a delimiter. If the value of IFS is null, no word splitting occurs.

	Explicit null arguments ("" or '') are retained and passed to commands as empty strings. Unquoted implicit null arguments, resulting from the expansion of parameters that have no values, are removed. If a parameter with no value is expanded within double quotes, a null argument results and is retained and passed to a command as an empty string. When a quoted null argument appears as part of a word whose expansion is non-null, the null argument is removed.
	After the preceding expansions, all unquoted occurrences of the characters ‘'’, and ‘"’ that did not result from one of the above expansions are removed.

Redirections:
	Before a command is executed, its input and output may be redirected. Redirection can change the files the command reads from and writes to. The redirection operators may precede or appear anywhere within a simple command or may follow a command.
	Redirections are processed in the order they appear, from left to right.
	If the first character of the redirection operator is ‘<’, the redirection refers to the standard input (file descriptor 0). If the first character of the redirection operator is ‘>’, the redirection refers to the standard output (file descriptor 1). The word following the redirection operator is subjected to parameter expansion, quote removal and word splitting. ***If it expands to more than one word, Bash reports an error.***

	A failure to open or create a file causes the redirection to fail.

3.6.1 Redirecting Input
	The general format for redirecting input is:
		<word

	Redirection of input causes the file whose name results from the expansion of word to be opened for reading on the standard input (file descriptor 0).

3.6.2 Redirecting Output
	The general format for redirecting output is:
		>word

	Redirection of output causes the file whose name results from the expansion of word to be opened for writing on the standard output (file descriptor 1). If the file does not exist it is created; if it does exist it is truncated to zero size.

3.6.3 Appending Redirected Output
	The general format for appending output is:
		>>word
	Redirection of output in this fashion causes the file whose name results from the expansion of word to be opened for appending on the standard output (file descriptor 1). If the file does not exist it is created.

3.6.6 Here Documents
	The format of here-documents is:
		<<word
				here-document
			delimiter

	This type of redirection instructs the shell to read input from the current source until a line containing only word (with no trailing blanks) is seen. All of the lines read up to that point are then used as the standard input for a command.

	No parameter and variable expansion is performed on word. If any part of word is quoted, the delimiter is the result of quote removal on word, and the lines in the here-document are not expanded. If word is unquoted, all lines of the here-document are subjected to parameter expansion, the character sequence \newline is ignored, and ‘\’ must be used to quote the characters ‘\’, ‘$’, and ‘`’.

	If the redirection operator is ‘<<-’, then all leading tab characters are stripped from input lines and the line containing delimiter. This allows here-documents within shell scripts to be indented in a natural fashion.

3.7 Executing Commands
	3.7.1 Simple Command Expansion
	When a simple command is executed, the shell performs the following expansions, assignments, and redirections, from left to right, in the following order.

	Redirections are saved for later processing.
	The words that are not redirections are expanded. If any words remain after expansion, the first word is taken to be the name of the command and the remaining words are the arguments.
	Redirections are performed as described above.

	If no command name results, redirections are performed, but do not affect the current shell environment. A redirection error causes the command to exit with a non-zero status.

	If there is a command name left after expansion, execution proceeds as described below. Otherwise, the command exits. The command exits with a status of zero.

3.7.2 Command Search and Execution
	After a command has been split into words, if it results in a simple command and an optional list of arguments, the following actions are taken.

		1. The shell searches for it in the list of shell builtins. If a match is found, that builtin is invoked.

		2. If the name is not a builtin, and contains no slashes, Bash searches each element of $PATH for a directory containing an executable file by that name. If the search is unsuccessful, the shell searches for a defined shell function named command_not_found_handle. If that function exists, it is invoked in a separate execution environment with the original command and the original command’s arguments as its arguments, and the function’s exit status becomes the exit status of that subshell. If that function is not defined, the shell prints an error message and returns an exit status of 127. //Now I get why execve's perror does not work. 

		3. If the search is successful, or if the command name contains one or more slashes, the shell executes the named program in a separate execution environment. Argument 0 is set to the name given, and the remaining arguments to the command are set to the arguments supplied, if any.

		4. If this execution fails because the file is not in executable format, and the file is not a directory, it is assumed to be a shell script and the shell executes it as described in Shell Scripts.

		5. The shell waits for the command to complete and collects its exit status.